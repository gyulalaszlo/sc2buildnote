// Generated by CoffeeScript 1.3.1
(function() {
  var ResourceState, exp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  ResourceState = (function(_super) {

    __extends(ResourceState, _super);

    ResourceState.name = 'ResourceState';

    function ResourceState() {
      return ResourceState.__super__.constructor.apply(this, arguments);
    }

    ResourceState.prototype.defaults = {
      minerals: 0,
      gas: 0,
      supply: 0,
      max_supply: 0
    };

    ResourceState.prototype.initialize = function() {};

    ResourceState.prototype.deduct = function(cost) {
      return this.set({
        minerals: this.attributes.minerals - cost.minerals,
        gas: this.attributes.gas - cost.gas,
        supply: this.attributes.supply + cost.supply
      });
    };

    ResourceState.prototype.add = function(cost) {
      return this.set({
        minerals: this.attributes.minerals + cost.minerals,
        gas: this.attributes.gas + cost.gas
      });
    };

    ResourceState.prototype.add_max_supply = function(supply) {
      return this.set({
        max_supply: this.attributes.max_supply + supply
      });
    };

    ResourceState.prototype.can_cover = function(cost) {
      if (this.attributes.minerals < cost.minerals) {
        return false;
      }
      if (this.attributes.gas < cost.gas) {
        return false;
      }
      if (this.attributes.max_supply < (this.attributes.supply + cost.supply)) {
        return false;
      }
      return true;
    };

    ResourceState.prototype.log = function() {
      return "Minerals: " + (this.get('minerals')) + " | Gas: " + (this.get('gas')) + " | Supply: " + (this.get('supply')) + " / " + (this.get('max_supply'));
    };

    return ResourceState;

  })(Backbone.Model);

  exp = typeof exports !== "undefined" && exports !== null ? exports : this;

  exp.ResourceState = ResourceState;

}).call(this);
