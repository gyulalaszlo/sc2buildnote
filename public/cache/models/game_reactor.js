// Generated by CoffeeScript 1.3.1
(function() {
  var GameReactor, exp,
    __slice = [].slice;

  GameReactor = (function() {

    GameReactor.name = 'GameReactor';

    function GameReactor(game, events, time) {
      this.game = game;
      this.events = events;
      this.time = time != null ? time : 0;
      this.workers = [];
      this.items = [];
      this.resources = this.game.resources;
      this.mining = new MiningReactor(this);
    }

    GameReactor.prototype.moveTo = function(time) {
      var _results;
      this.time = 0;
      _results = [];
      while (this.time < time) {
        _results.push(this.nextTick());
      }
      return _results;
    };

    GameReactor.prototype.nextTick = function() {
      var item, product, products, _i, _j, _len, _len1, _ref;
      this.log("----- " + this.time + "s | ", this.resources.log());
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.builder().has_production_finishing_at(this.time)) {
          products = item.builder().get_finished_product(this.time);
          for (_j = 0, _len1 = products.length; _j < _len1; _j++) {
            product = products[_j];
            this.addCompleted(product);
            this.log("PRODUCTION FINISHED -- " + (product.log()));
          }
        }
      }
      this.process_events_starting_at(this.time);
      this.mining.mine(this.workers, this.resources);
      console.log('');
      return this.time += 1;
    };

    GameReactor.prototype.addCompleted = function(item) {
      var buildable;
      this.items.push(item);
      buildable = item.get('buildable');
      if (buildable !== null) {
        if (buildable.attributes.worker) {
          this.addWorker(item);
        }
        return this.resources.add_max_supply(buildable.provides_supply);
      }
    };

    GameReactor.prototype.addWorker = function(worker) {
      this.workers.push(worker);
      return this.log("added worker", worker.log());
    };

    GameReactor.prototype.process_events_starting_at = function(time) {
      var e, starting, _i, _len, _results;
      starting = this.game.events.where({
        start_time: time
      });
      _results = [];
      for (_i = 0, _len = starting.length; _i < _len; _i++) {
        e = starting[_i];
        if (e.get('type') === GameEvent.BUILD) {
          _results.push(this.process_buildable_event_start(e));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    GameReactor.prototype.process_buildable_event_start = function(e) {
      var buildable, builder, can_build, item, _i, _len, _ref;
      buildable = e.get('buildable');
      can_build = false;
      if (!this.resources.can_cover(buildable.cost)) {
        this.error("Not enough resources for ", e.log(), this.resources.log());
        return false;
      }
      this.resources.deduct(buildable.cost);
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        builder = item.get('builder');
        can_build = builder.queue_production(this.time, buildable);
        if (can_build) {
          break;
        }
      }
      if (can_build) {
        this.log("STARTING PRODUCTION | ", e.log());
        return true;
      } else {
        this.error("No slots available for the production of", e.log());
        return false;
      }
    };

    GameReactor.prototype.process_events_ending_at = function(time) {
      var e, ending, _i, _len, _results;
      ending = this.game.events.where({
        end_time: time
      });
      _results = [];
      for (_i = 0, _len = ending.length; _i < _len; _i++) {
        e = ending[_i];
        if (e.get('type') === GameEvent.BUILD) {
          this.process_buildable_event_end(e);
        }
        _results.push(this.log("ending: ", e.log()));
      }
      return _results;
    };

    GameReactor.prototype.process_buildable_event_end = function(e) {
      var buildable, built_item;
      buildable = e.get('buildable');
      built_item = new BuiltItem({
        start_time: e.get('start_time'),
        end_time: e.get('end_time'),
        buildable: buildable
      });
      return this.addCompleted(built_item);
    };

    GameReactor.prototype.log = function() {
      var message;
      message = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, ["[GameReactor] "].concat(__slice.call(message)));
    };

    GameReactor.prototype.error = function() {
      var message;
      message = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.error.apply(console, ["[GameReactor] "].concat(__slice.call(message)));
    };

    return GameReactor;

  })();

  exp = typeof exports !== "undefined" && exports !== null ? exports : this;

  exp.GameReactor = GameReactor;

}).call(this);
