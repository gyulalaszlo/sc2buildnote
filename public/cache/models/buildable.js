// Generated by CoffeeScript 1.3.1
(function() {
  var Buildable, Buildables, Cost, exp,
    __slice = [].slice;

  Cost = (function() {

    Cost.name = 'Cost';

    function Cost(minerals, gas, supply) {
      this.minerals = minerals;
      this.gas = gas != null ? gas : 0;
      this.supply = supply != null ? supply : 0;
    }

    Cost.prototype.set = function(minerals, gas, supply) {
      this.minerals = minerals != null ? minerals : 0;
      this.gas = gas != null ? gas : 0;
      this.supply = supply != null ? supply : 0;
    };

    Cost.prototype.toString = function() {
      return "M:" + this.minerals + " | G:" + this.gas + " | Supply: " + this.supply;
    };

    return Cost;

  })();

  Buildable = (function() {

    Buildable.name = 'Buildable';

    function Buildable(name, attributes) {
      this.name = name;
      this.attributes = attributes != null ? attributes : {};
      this.provides_supply = 0;
      this.key = this.name;
      this.parse(this.attributes);
    }

    Buildable.prototype.parse = function(attributes) {
      var k, v, _results;
      _results = [];
      for (k in attributes) {
        v = attributes[k];
        switch (k) {
          case 'name':
            _results.push(this.name = v);
            break;
          case 'cost':
            _results.push(this.cost = new Cost(v[0], v[1], v[2]));
            break;
          case 'time':
            _results.push(this.time = parseInt(v));
            break;
          case 'provides_supply':
            _results.push(this.provides_supply = parseInt(v));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Buildable.prototype.slots = function() {
      var _ref;
      return (_ref = this.attributes.slots) != null ? _ref : {};
    };

    Buildable.prototype.log = function() {
      var msg;
      msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, ["[Buildable]"].concat(__slice.call(msg)));
    };

    return Buildable;

  })();

  Buildables = (function() {

    Buildables.name = 'Buildables';

    function Buildables() {}

    Buildables.add_group = function(group_name, group_data) {
      var buildable, data, group, k, _results;
      Buildables[group_name] = {};
      group = Buildables[group_name];
      _results = [];
      for (k in group_data) {
        data = group_data[k];
        buildable = new Buildable(k, data);
        _results.push(group[k] = buildable);
      }
      return _results;
    };

    return Buildables;

  })();

  exp = typeof exports !== "undefined" && exports !== null ? exports : this;

  exp.Cost = Cost;

  exp.Buildable = Buildable;

  exp.Buildables = Buildables;

}).call(this);
