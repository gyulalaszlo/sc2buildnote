// Generated by CoffeeScript 1.3.1
(function() {
  var Buildable, Buildables, BuilderInstance, BuilderProto, BuilderSlotInstance, BuilderSlotProto, BuiltItem, Cost, exp,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Cost = (function() {

    Cost.name = 'Cost';

    function Cost(minerals, gas, supply) {
      this.minerals = minerals;
      this.gas = gas != null ? gas : 0;
      this.supply = supply != null ? supply : 0;
    }

    return Cost;

  })();

  Buildable = (function() {

    Buildable.name = 'Buildable';

    function Buildable(name, attributes) {
      this.name = name;
      this.attributes = attributes != null ? attributes : {};
      this.provides_supply = 0;
      this.key = this.name;
      this.builder = new BuilderProto(this);
      this.parse(this.attributes);
    }

    Buildable.prototype.parse = function(attributes) {
      var k, slot_attribtues, slot_name, v, _results;
      _results = [];
      for (k in attributes) {
        v = attributes[k];
        switch (k) {
          case 'name':
            _results.push(this.name = v);
            break;
          case 'cost':
            _results.push(this.cost = new Cost(v[0], v[1], v[2]));
            break;
          case 'time':
            _results.push(this.time = parseInt(v));
            break;
          case 'provides_supply':
            _results.push(this.provides_supply = parseInt(v));
            break;
          case 'slots':
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (slot_name in v) {
                slot_attribtues = v[slot_name];
                _results1.push(this.add_slot(slot_name, slot_attribtues));
              }
              return _results1;
            }).call(this));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Buildable.prototype.add_slot = function(name, attributes) {
      var slot;
      slot = BuilderSlotProto.parse(this, name, attributes);
      return this.builder.push(slot);
    };

    Buildable.prototype.log = function() {
      var msg;
      msg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, ["[Buildable]"].concat(__slice.call(msg)));
    };

    return Buildable;

  })();

  Buildables = (function() {

    Buildables.name = 'Buildables';

    function Buildables() {}

    Buildables.add_group = function(group_name, group_data) {
      var buildable, data, group, k, _results;
      Buildables[group_name] = {};
      group = Buildables[group_name];
      _results = [];
      for (k in group_data) {
        data = group_data[k];
        buildable = new Buildable(k, data);
        _results.push(group[k] = buildable);
      }
      return _results;
    };

    return Buildables;

  })();

  BuilderProto = (function() {

    BuilderProto.name = 'BuilderProto';

    function BuilderProto(buildable) {
      this.buildable = buildable;
      this.slots = [];
    }

    BuilderProto.prototype.push = function(slot) {
      return this.slots.push(slot);
    };

    BuilderProto.prototype.can_build = function(buildable_key) {
      var slot, _i, _len, _ref;
      _ref = this.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        if (slot.can_build(buildable_key)) {
          return true;
        }
      }
      return false;
    };

    BuilderProto.prototype.has_production_finishing_at = function(time) {
      var slot, _i, _len, _ref;
      _ref = this.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        if (slot.has_production_finishing_at(time)) {
          return true;
        }
      }
      return false;
    };

    return BuilderProto;

  })();

  BuilderSlotProto = (function() {

    BuilderSlotProto.name = 'BuilderSlotProto';

    function BuilderSlotProto(parent, name, allowed_units) {
      this.parent = parent;
      this.name = name;
      this.allowed_units = allowed_units;
    }

    BuilderSlotProto.prototype.can_build = function(buildable_key) {
      if (this.occupied) {
        return false;
      }
      return _(this.allowed_units).indexOf(buildable_key) !== -1;
    };

    BuilderSlotProto.parse = function(buildable, slot_name, attributes) {
      return new BuilderSlotProto(buildable, slot_name, attributes.builds);
    };

    return BuilderSlotProto;

  })();

  BuilderInstance = (function() {

    BuilderInstance.name = 'BuilderInstance';

    function BuilderInstance(builder) {
      var slot, _i, _len, _ref;
      this.builder = builder;
      this.slots = [];
      _ref = this.builder.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        this.slots.push(new BuilderSlotInstance(slot, this));
      }
    }

    BuilderInstance.prototype.push = function(slot_instance) {
      return this.slots.push(slot_instance);
    };

    BuilderInstance.prototype.can_build = function(buildable_key) {
      var slot, _i, _len, _ref;
      _ref = this.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        if (slot.can_build(buildable_key)) {
          return true;
        }
      }
      return false;
    };

    BuilderInstance.prototype.queue_production = function(time, buildable) {
      var slot, _i, _len, _ref;
      _ref = this.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        if (!slot.can_build(buildable.key)) {
          continue;
        }
        slot.start_building(time, buildable);
        return true;
      }
      return false;
    };

    BuilderInstance.prototype.has_production_finishing_at = function(time) {
      var slot, _i, _len, _ref;
      _ref = this.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        if (slot.has_production_finishing_at(time)) {
          return true;
        }
      }
      return false;
    };

    BuilderInstance.prototype.get_finished_product = function(time) {
      var results, slot, _i, _len, _ref;
      results = [];
      _ref = this.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        if (!slot.has_production_finishing_at(time)) {
          continue;
        }
        results.push(slot.get_product(time));
      }
      return results;
    };

    return BuilderInstance;

  })();

  BuilderSlotInstance = (function() {

    BuilderSlotInstance.name = 'BuilderSlotInstance';

    function BuilderSlotInstance(builder_slot, builder_instance) {
      this.builder_slot = builder_slot;
      this.builder_instance = builder_instance;
      this.occupied = false;
      this.production_started_at = 0;
      this.production_ends_at = 0;
      this.currently_building = null;
    }

    BuilderSlotInstance.prototype.can_build = function(buildable_key) {
      if (this.occupied) {
        return false;
      }
      return _(this.builder_slot.allowed_units).indexOf(buildable_key) !== -1;
    };

    BuilderSlotInstance.prototype.start_building = function(time, buildable) {
      if (!this.can_build(buildable.key)) {
        return;
      }
      this.currently_building = buildable;
      this.production_started_at = time;
      return this.production_ends_at = time + buildable.time;
    };

    BuilderSlotInstance.prototype.has_production_finishing_at = function(time) {
      if (this.currently_building === null) {
        return false;
      }
      if (this.production_ends_at !== time) {
        return false;
      }
      return true;
    };

    BuilderSlotInstance.prototype.get_product = function(time) {
      if (!(this.currently_building && (this.production_ends_at = time))) {
        return null;
      }
      return new BuiltItem({
        start_time: this.production_started_at,
        end_time: this.production_ends_at,
        buildable: this.currently_building
      });
    };

    return BuilderSlotInstance;

  })();

  BuiltItem = (function(_super) {

    __extends(BuiltItem, _super);

    BuiltItem.name = 'BuiltItem';

    function BuiltItem() {
      return BuiltItem.__super__.constructor.apply(this, arguments);
    }

    BuiltItem.prototype.defaults = {
      start_time: 0,
      end_time: 0,
      buildable: null,
      builder: null
    };

    BuiltItem.prototype.initialize = function(attributes) {
      var buildable;
      buildable = this.get('buildable');
      return this.set({
        buildable: buildable,
        end_time: this.attributes.start_time + buildable.time,
        builder: new BuilderInstance(buildable.builder)
      });
    };

    BuiltItem.prototype.builder = function() {
      return this.get('builder');
    };

    BuiltItem.prototype.log = function() {
      return "[B] " + this.attributes.buildable.name + " | " + this.attributes.start_time + "s - " + this.attributes.end_time + " s";
    };

    return BuiltItem;

  })(Backbone.Model);

  exp = typeof exports !== "undefined" && exports !== null ? exports : this;

  exp.Cost = Cost;

  exp.BuiltItem = BuiltItem;

  exp.Buildable = Buildable;

  exp.Buildables = Buildables;

}).call(this);
