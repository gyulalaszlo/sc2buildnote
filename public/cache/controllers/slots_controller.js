// Generated by CoffeeScript 1.3.1
(function() {
  var SlotItemView, SlotView, SlotsView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  SlotItemView = (function(_super) {

    __extends(SlotItemView, _super);

    SlotItemView.name = 'SlotItemView';

    function SlotItemView() {
      return SlotItemView.__super__.constructor.apply(this, arguments);
    }

    SlotItemView.prototype.tagName = "li";

    SlotItemView.prototype.template = _.template($('#slot-item-template').html());

    SlotItemView.prototype.events = {
      click: 'displayTooltip'
    };

    SlotItemView.prototype.initialize = function() {};

    SlotItemView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.css({
        position: 'absolute',
        top: this.model.get('starts_at'),
        height: this.model.get('ends_at') - this.model.get('starts_at')
      });
      if (!this.model.get('can_be_built')) {
        this.$el.addClass('error');
      }
      return this;
    };

    SlotItemView.prototype.displayTooltip = function() {
      return console.log(this.model.log());
    };

    return SlotItemView;

  })(Backbone.View);

  SlotView = (function(_super) {

    __extends(SlotView, _super);

    SlotView.name = 'SlotView';

    function SlotView() {
      return SlotView.__super__.constructor.apply(this, arguments);
    }

    SlotView.prototype.tagName = "div";

    SlotView.prototype.slotItems = function() {
      return $('.slot-items', this.$el);
    };

    SlotView.prototype.template = _.template($('#slot-template').html());

    SlotView.prototype.initialize = function() {
      this.model.bind('change', this.render, this);
      this.model.bind('destroy', this.remove, this);
      this.model.queue.bind('add', this.addOne, this);
      this.model.queue.bind('reset', this.addAll, this);
      return this.model.queue.bind('all', this.render, this);
    };

    SlotView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.addClass('slot-block');
      this.addAll();
      return this;
    };

    SlotView.prototype.addOne = function(item) {
      var view;
      view = new SlotItemView({
        model: item
      });
      return this.slotItems().append(view.render().el);
    };

    SlotView.prototype.addAll = function() {
      return this.model.queue.each(this.addOne, this);
    };

    return SlotView;

  })(Backbone.View);

  SlotsView = (function(_super) {

    __extends(SlotsView, _super);

    SlotsView.name = 'SlotsView';

    function SlotsView() {
      return SlotsView.__super__.constructor.apply(this, arguments);
    }

    SlotsView.prototype.el = $('#main');

    SlotsView.prototype.slotlist = function() {
      return $('#slot-list');
    };

    SlotsView.prototype.initialize = function(slots) {
      this.slots = slots;
      this.slots.bind('add', this.addOne, this);
      this.slots.bind('reset', this.addAll, this);
      return this.slots.bind('all', this.render, this);
    };

    SlotsView.prototype.render = function() {
      if (this.slots.length) {

      } else {

      }
    };

    SlotsView.prototype.addOne = function(slot) {
      var view;
      view = new SlotView({
        model: slot
      });
      return this.slotlist().append(view.render().el);
    };

    SlotsView.prototype.addAll = function() {
      return this.slots.each(this.addOne);
    };

    return SlotsView;

  })(Backbone.View);

  $(function() {
    var App, barracks, depot, game, i, item, marine, scv, slots, _i, _len, _ref;
    slots = new Slots;
    App = new SlotsView(slots);
    game = new Game(new ResourceState({
      minerals: 50,
      gas: 0,
      supply: 0,
      max_supply: 0
    }), slots);
    game.reactor.setDefaultItems([
      new SlotQueueItem({
        buildable: Buildables.buildings["Command Center"]
      }), new SlotQueueItem({
        buildable: Buildables.units.SCV
      }), new SlotQueueItem({
        buildable: Buildables.units.SCV
      }), new SlotQueueItem({
        buildable: Buildables.units.SCV
      }), new SlotQueueItem({
        buildable: Buildables.units.SCV
      }), new SlotQueueItem({
        buildable: Buildables.units.SCV
      }), new SlotQueueItem({
        buildable: Buildables.units.SCV
      })
    ]);
    game.reactor.reset();
    depot = Buildables.buildings["Supply Depot"];
    barracks = Buildables.buildings["Barracks"];
    scv = Buildables.units.SCV;
    marine = Buildables.units.Marine;
    _ref = [scv, scv, scv, depot, scv, scv, scv, barracks, scv, scv, scv, marine, scv, scv];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      item = _ref[i];
      game.reactor.tryToQueue(item);
    }
    game.reactor.debug = true;
    game.reactor.reset();
    return game.reactor.moveTo(200);
  });

}).call(this);
